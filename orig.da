import sys
import math
import time
import csv
import statistics
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt 
from random import randint
#TIMEOUT = 1
controller = import_da('controller')

class Proposer(process, controller.Controllee):
    def setup(acceptors:set,ctl,r,d,timeout,w):
        self.n = None              # proposal number
        self.majority = acceptors  # majority of acceptors; all in other papers
        super().setup(ctl)
        if r == 0:
            self.r = 100000
        else:
            self.r = math.ceil(1 / r)
        self.d = d
        self.sendmessages = 0
        self.timeout1 = timeout
        self.w = w

    def to_consent():
        n = (0, self) if n == None else (n[0]+1, self)  # pick a prop num
        isDrop = 0
        if sendmessages >= r:
            #output("message dropped")
            sendmessages = 0
            isDrop = 1
        time.sleep(d)
        if isDrop is not 1:
            send(('prepare', n), to= majority)
        if await((len(setof(a, received(('respond', _n, _), from_ =a)))
                 > len(acceptors)/2)):
            v = anyof(setof(v, received(('respond', _n, (n2, v))),
                            n2==max(setof(n2, received(('respond', _n, (n2, _))))))
                          or {randint(1,100)})  # any value, pick in 1..100
            responded = setof(a, received(('respond', _n, _), from_ =a))
            isDrop = 0
            if sendmessages >= r:
                #output("message dropped")
                sendmessages = 0
                isDrop = 1
            time.sleep(d)
            if isDrop is not 1:
                send(('accept', n, v), to= responded)
            sendmessages = sendmessages + 1
            debug('### chose', n, v)
            isDrop = 0
        elif timeout(timeout1):
            output('failed proposal number', n)

    @controller.run
    def run():
        while not received(('done',)):
            to_consent()
            time.sleep(w)
        #output('terminating')

    def anyof(s):
        return next(iter(s)) if s else None

@controller.rugroup('bo_measured')
class Acceptor(process, controller.Controllee):
    def setup(learners:set,ctl,r,d): 
        super().setup(ctl)
        if r == 0:
            self.r = 100000
        else:
            self.r = math.ceil(1 / r)
        self.d = d
        self.sendmessages = 0

    def receive(msg= ('prepare', n), from_=
     p):
        if each(sent(('respond', n2, _)), has= n > n2):
            maxprop = anyof(setof((n, v), sent(('accepted', n, v)),
                               n==max(setof(n, sent(('accepted', n, _))))))
            send(('respond', n, maxprop), to =p)
            output("listener ")
            output(n)

    def receive(msg= ('accept', n, v)):
        isDrop = 0
        if not some(sent(('respond', n2, _)), has= n2 > n):
            if sendmessages >= r:
                #output("message dropped")
                sendmessages = 0
                isDrop = 1
            time.sleep(d)
            if isDrop is not 1:
                send(('accepted', n, v), to= learners)
            sendmessages = sendmessages + 1
            isDrop = 0

    @controller.run
    def run():
        await(received(('done',)))
        #output('terminating')

    def anyof(s):
        """return any element of set s if s is not empty or 'None' otherwise"""
        return next(iter(s)) if s else None

class Learner(process, controller.Controllee):
    def setup(acceptors:set,ctl,d,timeout): 
        super().setup(ctl)
        self.d = d
        self.timeout1 = timeout
        self.learned = -1

    def learn():
        if await(some(received(('accepted', n, v)),
                      has= len(setof(a, received(('accepted', _n, _v), from_=a)))
                           > len(acceptors)/2)):
            output('learned', n, v)
            learned = v

        elif timeout(timeout1 * 10):
            #output('failed learning anything')
            pass

    @controller.run
    def run():
        learn()
        output('terminating')
        send(('learned_val', learned), to=nodeof(self))
        send(('learned', ), to=nodeof(self))
        

def WriteToExcel(filename, val):
    Performance_Statistics = open(filename, 'a')
    csvwriter = csv.writer(Performance_Statistics)
    csvwriter.writerow(val)
    Performance_Statistics.close()

def DrawPlots(output_file, col1, col2, col3, filename):
      
    df = pd.read_csv(output_file, nrows=None)

    x = df[col1]
    y1 = df[col2]
    y2 = df[col3]
    
    fig, ax1 = plt.subplots(figsize=(20,10))
    ax1.plot(x, y1, 'b-')
    ax1.set_xlabel(col1)
    # Make the y-axis label, ticks and tick labels match the line color.
    ax1.set_ylabel(col2, color='b')
    ax1.tick_params('y', colors='b')

    ax2 = ax1.twinx()
    ax2.plot(x, y2, 'r--')
    ax2.set_ylabel(col3, color='r')
    ax2.tick_params('y', colors='r')
    fig.tight_layout()
    fig.savefig(filename)
    plt.close(fig)

def main():
    nproposers = int(sys.argv[1]) if len(sys.argv) > 1 else 5
    nacceptors = int(sys.argv[2]) if len(sys.argv) > 2 else 3
    nlearners = int(sys.argv[3]) if len(sys.argv) > 3 else 3
    n = int(sys.argv[4]) if len(sys.argv) > 4 else 1
    r = float(sys.argv[5]) if len(sys.argv) > 5 else 0.0
    d = float(sys.argv[6]) if len(sys.argv) > 6 else 0.0
    w = float(sys.argv[7]) if len(sys.argv) > 7 else 0.0
    tp = float(sys.argv[8]) if len(sys.argv) > 8 else 1.0
    tl = float(sys.argv[9]) if len(sys.argv) > 9 else 1.0
    iter = 0
    initialr = 0
    initiald = 0
    initialw = 0
    initialtp = 0
    initialtl = 0
    mylist = ["Loss_Rate", "Average_Process_Time", "Range_Process_Time", "StandardDeviation_Process_Time", "Average_Elapsed_Time", "Range_Elapsed_Time",                        
                "StandardDeviation_ElapsedTime","Correctness", "Timeout"]

    WriteToExcel("messagelossrateVary.csv", mylist)
    count = 0
    while initialr < r:
        process_time_list = []
        elapsed_time_list = []
        myval = []
        learntvalue = []
        for x in range(n):
            itrlearntval = []
            count = count + 1
            ctl = new(controller.Controller, num= 1)
            setup(ctl, (nacceptors + nproposers + nlearners, ))
            start(ctl)
            acceptors = new(Acceptor, num= nacceptors)
            proposers = new(Proposer, (acceptors,ctl,initialr,d,tp,w), num= nproposers)
            learners = new(Learner, (acceptors,ctl,d,tl), num= nlearners)
            for p in acceptors: setup(p, (learners,ctl,initialr,d))
            start(acceptors | proposers | learners)        
            await(each(l in learners, has=received(('learned',), from_=l)))
            
            for l in learners:
                itrlearntval.append(list(setof(val, received(('learned_val', val), from_=a), a == l))[0])
            learntvalue.append(itrlearntval)

            #output('done')
            send(('done',), to= (acceptors|proposers))
            data = None
            send(('moredata',count), to= ctl)
            if (await(some(received(('perfData',data,itr)), has = itr==count))):
                mylist = list(data)
                process_time_list.append(mylist[0])
                elapsed_time_list.append(mylist[1])
                send(('done',), to= ctl)
        myval.append(initialr)
        m = statistics.mean(process_time_list)
        myval.append(m)
        minval = min(process_time_list)
        maxval = max(process_time_list)
        rangeval = maxval - minval
        myval.append(rangeval)
        dev = statistics.stdev(process_time_list)
        myval.append(dev)
        m = statistics.mean(elapsed_time_list)
        myval.append(m)
        minval = min(elapsed_time_list)
        maxval = max(elapsed_time_list)
        rangeval = maxval - minval
        myval.append(rangeval)
        dev = statistics.stdev(elapsed_time_list)
        myval.append(dev)

        correct = True
        timeoutoccured = False
        for sublist in learntvalue:
            first = sublist[0]
            for item in sublist:
                if item is not first:
                    correct = False
                if item == -1:
                    timeoutoccured = True
        myval.append(correct)
        myval.append(timeoutoccured)

        WriteToExcel("messagelossrateVary.csv", myval)
        initialr = initialr + r/10

    DrawPlots('messagelossrateVary.csv', 'Loss_Rate', 'Average_Elapsed_Time', 'Average_Process_Time', 'loss_rate.png')

    mylist = ["Message_Delay_Rate", "Average_Process_Time", "Range_Process_Time", "StandardDeviation_Process_Time", "Average_Elapsed_Time", "Range_Elapsed_Time",       
                "StandardDeviation_ElapsedTime","Correctness", "Timeout"]   
    WriteToExcel("messageDelayVary.csv", mylist)
    while initiald < d:
        process_time_list = []
        elapsed_time_list = []
        myval = []
        learntvalue = []
        for x in range(n):
            itrlearntval = []
            count = count + 1
            ctl = new(controller.Controller, num= 1)
            setup(ctl, (nacceptors + nproposers + nlearners, ))
            start(ctl)
            acceptors = new(Acceptor, num= nacceptors)
            proposers = new(Proposer, (acceptors,ctl,r,initiald,tp,w), num= nproposers)
            learners = new(Learner, (acceptors,ctl,initiald,tl), num= nlearners)
            for p in acceptors: setup(p, (learners,ctl,r,initiald))
            start(acceptors | proposers | learners)        
            await(each(l in learners, has=received(('learned',), from_=l)))

            #output('done')
            send(('done',), to= (acceptors|proposers))
            data = None
            send(('moredata',count), to= ctl)
            if (await(some(received(('perfData',data,itr)), has = count==itr))):
                mylist = list(data)
                process_time_list.append(mylist[0])
                elapsed_time_list.append(mylist[1])
                send(('done',), to= ctl)
        myval.append(initiald)
        m = statistics.mean(process_time_list)
        myval.append(m)
        minval = min(process_time_list)
        maxval = max(process_time_list)
        rangeval = maxval - minval
        myval.append(rangeval)
        dev = statistics.stdev(process_time_list)
        myval.append(dev)
        m = statistics.mean(elapsed_time_list)
        myval.append(m)
        minval = min(elapsed_time_list)
        maxval = max(elapsed_time_list)
        rangeval = maxval - minval
        myval.append(rangeval)
        dev = statistics.stdev(elapsed_time_list)
        myval.append(dev)
        correct = True
        timeoutoccured = False
        for sublist in learntvalue:
            first = sublist[0]
            for item in sublist:
                if item is not first:
                    correct = False
                if item == -1:
                    timeoutoccured = True
        myval.append(correct)
        myval.append(timeoutoccured)
        WriteToExcel("messageDelayVary.csv", myval)
        initiald = initiald + d/10

    DrawPlots('messageDelayVary.csv', 'Message_Delay_Rate', 'Average_Elapsed_Time', 'Average_Process_Time', 'delay_rate.png')

    mylist = ["WaitTimeDelay", "Average_Process_Time", "Range_Process_Time", "StandardDeviation_Process_Time", "Average_Elapsed_Time", "Range_Elapsed_Time",       
                "StandardDeviation_ElapsedTime","Correctness", "Timeout"] 
    WriteToExcel("WaitTimeRound.csv", mylist)
    while initialw < w:
        process_time_list = []
        elapsed_time_list = []
        myval = []
        learntvalue = []
        for x in range(n):
            itrlearntval = []
            count = count + 1
            ctl = new(controller.Controller, num= 1)
            setup(ctl, (nacceptors + nproposers + nlearners, ))
            start(ctl)
            acceptors = new(Acceptor, num= nacceptors)
            proposers = new(Proposer, (acceptors,ctl,r,d,tp,initialw), num= nproposers)
            learners = new(Learner, (acceptors,ctl,d,tl), num= nlearners)
            for p in acceptors: setup(p, (learners,ctl,r,d))
            start(acceptors | proposers | learners)        
            await(each(l in learners, has=received(('learned',), from_=l)))


            #output('done')
            send(('done',), to= (acceptors|proposers))
            data = None
            send(('moredata',count), to= ctl)
            if (await(some(received(('perfData',data,itr)), has = count==itr))):
                mylist = list(data)
                process_time_list.append(mylist[0])
                elapsed_time_list.append(mylist[1])
                send(('done',), to= ctl)
        myval.append(initialw)
        m = statistics.mean(process_time_list)
        myval.append(m)
        minval = min(process_time_list)
        maxval = max(process_time_list)
        rangeval = maxval - minval
        myval.append(rangeval)
        dev = statistics.stdev(process_time_list)
        myval.append(dev)
        m = statistics.mean(elapsed_time_list)
        myval.append(m)
        minval = min(elapsed_time_list)
        maxval = max(elapsed_time_list)
        rangeval = maxval - minval
        myval.append(rangeval)
        dev = statistics.stdev(elapsed_time_list)
        myval.append(dev)
        correct = True
        timeoutoccured = False
        for sublist in learntvalue:
            first = sublist[0]
            for item in sublist:
                if item is not first:
                    correct = False
                if item == -1:
                    timeoutoccured = True
        myval.append(correct)
        myval.append(timeoutoccured)
        WriteToExcel("WaitTimeRound.csv", myval)
        initialw = initialw + w/10

    DrawPlots('WaitTimeRound.csv', 'WaitTimeDelay', 'Average_Elapsed_Time', 'Average_Process_Time', 'wait_time.png')

    mylist = ["Proposer_TimeOutValue", "Average_Process_Time", "Range_Process_Time", "StandardDeviation_Process_Time", "Average_Elapsed_Time", "Range_Elapsed_Time",       
                "StandardDeviation_ElapsedTime", "Correctness", "Timeout"]
    WriteToExcel("TimeoutProposerVary.csv", mylist)
    
    while initialtp < tp:
        process_time_list = []
        elapsed_time_list = []
        myval = []
        learntvalue = []
        for x in range(n):
            itrlearntval = []
            count = count + 1
            ctl = new(controller.Controller, num= 1)
            setup(ctl, (nacceptors + nproposers + nlearners, ))
            start(ctl)
            acceptors = new(Acceptor, num= nacceptors)
            proposers = new(Proposer, (acceptors,ctl,r,d,initialtp,w), num= nproposers)
            learners = new(Learner, (acceptors,ctl,d,tl), num= nlearners)
            for p in acceptors: setup(p, (learners,ctl,r,d))
            start(acceptors | proposers | learners)        
            await(each(l in learners, has=received(('learned',), from_=l)))

            output('done')
            send(('done',), to= (acceptors|proposers))
            data = None
            send(('moredata',count), to= ctl)
            if (await(some(received(('perfData',data,itr)), has = count==itr))):
                mylist = list(data)
                process_time_list.append(mylist[0])
                elapsed_time_list.append(mylist[1])
                send(('done',), to= ctl)
        myval.append(initialtp)
        m = statistics.mean(process_time_list)
        myval.append(m)
        minval = min(process_time_list)
        maxval = max(process_time_list)
        rangeval = maxval - minval
        myval.append(rangeval)
        dev = statistics.stdev(process_time_list)
        myval.append(dev)
        m = statistics.mean(elapsed_time_list)
        myval.append(m)
        minval = min(elapsed_time_list)
        maxval = max(elapsed_time_list)
        rangeval = maxval - minval
        myval.append(rangeval)
        dev = statistics.stdev(elapsed_time_list)
        myval.append(dev)
        correct = True
        timeoutoccured = False
        for sublist in learntvalue:
            first = sublist[0]
            for item in sublist:
                if item is not first:
                    correct = False
                if item == -1:
                    timeoutoccured = True
        myval.append(correct)
        myval.append(timeoutoccured)
        WriteToExcel("TimeoutProposerVary.csv", myval)
        initialtp = initialtp + tp/5

    DrawPlots('TimeoutProposerVary.csv', 'Proposer_TimeOutValue', 'Average_Elapsed_Time', 'Average_Process_Time','timeoutpropose.png')

    mylist = ["Learner_TimeOutValue", "Average_Process_Time", "Range_Process_Time", "StandardDeviation_Process_Time", "Average_Elapsed_Time", "Range_Elapsed_Time",       
                "StandardDeviation_ElapsedTime","Correctness", "Timeout"]
    WriteToExcel("TimeoutLearnerVary.csv", mylist)
    while initialtl < tl:
        process_time_list = []
        elapsed_time_list = []
        myval = []
        learntvalue = []
        for x in range(n):
            itrlearntval = []
            count = count + 1
            ctl = new(controller.Controller, num= 1)
            setup(ctl, (nacceptors + nproposers + nlearners, ))
            start(ctl)
            acceptors = new(Acceptor, num= nacceptors)
            proposers = new(Proposer, (acceptors,ctl,r,d,tp,w), num= nproposers)
            learners = new(Learner, (acceptors,ctl,d,initialtl), num= nlearners)
            for p in acceptors: setup(p, (learners,ctl,r,d))
            start(acceptors | proposers | learners)        
            await(each(l in learners, has=received(('learned',), from_=l)))

            #output('done')
            send(('done',), to= (acceptors|proposers))
            data = None
            send(('moredata',count), to= ctl)
            if (await(some(received(('perfData',data,itr)), has = count==itr))):
                mylist = list(data)
                process_time_list.append(mylist[0])
                elapsed_time_list.append(mylist[1])
                send(('done',), to= ctl)
        myval.append(initialtl)
        m = statistics.mean(process_time_list)
        myval.append(m)
        minval = min(process_time_list)
        maxval = max(process_time_list)
        rangeval = maxval - minval
        myval.append(rangeval)
        dev = statistics.stdev(process_time_list)
        myval.append(dev)
        m = statistics.mean(elapsed_time_list)
        myval.append(m)
        minval = min(elapsed_time_list)
        maxval = max(elapsed_time_list)
        rangeval = maxval - minval
        myval.append(rangeval)
        dev = statistics.stdev(elapsed_time_list)
        myval.append(dev)
        correct = True
        timeoutoccured = False
        for sublist in learntvalue:
            first = sublist[0]
            for item in sublist:
                if item is not first:
                    correct = False
                if item == -1:
                    timeoutoccured = True
        myval.append(correct)
        myval.append(timeoutoccured)
        WriteToExcel("TimeoutLearnerVary.csv", myval)
        initialtl = initialtl + tl/5

    DrawPlots('TimeoutLearnerVary.csv', 'Learner_TimeOutValue', 'Average_Elapsed_Time', 'Average_Process_Time','timeoutlearner.png')

# This is an executable specification of the algorithm described in
# Lamport, L. (2001).  Paxos Made Simple.  ACM SIGACT News 
# (Distributed Computing Column), 32(4):51-58, December.

# This code includes setup and termination for running repeated rounds until
# the learners all terminate after learning the consent value or timeout.
